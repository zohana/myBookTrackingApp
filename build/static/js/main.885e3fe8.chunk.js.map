{"version":3,"sources":["components/search/SearchPage.js","components/books/BookShelves.js","components/books/EachBookDetails.js","utils/BooksAPI.js","App.js","index.js"],"names":["SearchPage","_this$props","this","props","valueOfInputField","handleQueryUpdate","getSearchResults","react_default","a","createElement","className","react_router_dom","to","type","placeholder","value","onChange","Component","BookShelves","currentlyReadingTitle","displayCurrentlyReadingBooks","wantToReadTitle","displayWantToReadBooks","readTitle","displayTheBooksRead","key","EachBookDetails","imagePath","optionSelected","handleBookShelfUpdate","nameOfTheBook","authorOfTheBook","bookId","index","style","width","height","backgroundImage","concat","id","map","author","i","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","BooksApp","state","currentlyReading","wantToRead","booksRead","optionValue","showSearchPage","renderCurrentlyReadingBooks","_this$state","_this","BooksAPI","books_EachBookDetails","imageLinks","thumbnail","onBookUpdate","title","authors","renderWantToReadBooks","renderBooksRead","event","setState","target","filter","c","updateQuery","clearQuery","_this2","push","_this3","_this$state2","showingBooks","toLowerCase","includes","react_router","exact","path","render","_ref","history","search_SearchPage","undefined","slice","books_BookShelves","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.885e3fe8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../../App.css\";\nimport { Link } from \"react-router-dom\";\n\nclass SearchPage extends Component {\n  \n  render() {\n    const {\n      valueOfInputField,\n      handleQueryUpdate,\n      getSearchResults\n    } = this.props;\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link to=\"/\" className=\"close-search\">\n            Close\n          </Link>\n\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              value={valueOfInputField}\n              onChange={handleQueryUpdate}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ol className=\"books-grid\">{getSearchResults}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst BookShelves = props => {\n  const {\n    currentlyReadingTitle,\n    displayCurrentlyReadingBooks,\n    wantToReadTitle,\n    displayWantToReadBooks,\n    readTitle,\n    displayTheBooksRead\n  } = props;\n  return (\n    \n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n        <div className=\"list-books-content\">\n          <div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">{currentlyReadingTitle}</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\" key=\"dcrb\">{displayCurrentlyReadingBooks}</ol>\n              </div>\n            </div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">{wantToReadTitle}</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\" key=\"dwrb\"> {displayWantToReadBooks}</ol>\n              </div>\n            </div>\n            <div className=\"bookshelf\">\n              <h2 className=\"bookshelf-title\">{readTitle}</h2>\n              <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\" key=\"drb\">{displayTheBooksRead}</ol>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"open-search\">\n        <Link to='/search'>Search</Link>\n          \n        </div>\n      </div>\n      \n   \n  );\n};\n\nexport default BookShelves;\n","import React from \"react\";\n\nconst EachBookDetails = props => {\n  const {\n    imagePath,\n    optionSelected,\n    handleBookShelfUpdate,\n    nameOfTheBook,\n    authorOfTheBook,\n    bookId,\n    index\n  } = props;\n  return (\n    <li key={\"book_\" + index}>\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 193,\n              backgroundImage: `url(${imagePath})`\n              //backgroundColor: 'red'\n            }}\n          ></div>\n          <div className=\"book-shelf-changer\">\n            <select\n              value={optionSelected}\n              onChange={handleBookShelfUpdate}\n              //this.onBookUpdate(book)}\n              id={bookId}\n            >\n              <option value=\"currentlyReading\" id=\"option1\">\n                Currently Reading\n              </option>\n              <option value=\"wantToRead\" id=\"option2\">\n                Want to Read\n              </option>\n              <option value=\"read\" id=\"option3\">\n                Read\n              </option>\n              <option value=\"none\" id=\"option4\">\n                None\n              </option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{nameOfTheBook}</div>\n        <div className=\"book-authors\">\n          {authorOfTheBook.map((author, i) => {\n            return <span key={author + \"_\" + i}>{author}</span>;\n          })}\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default EachBookDetails;\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => {res.json()}\n  )\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchPage from \"./components/search/SearchPage\";\nimport BookShelves from \"./components/books/BookShelves\";\nimport EachBookDetails from \"./components/books/EachBookDetails\";\nimport * as BooksAPI from \"./utils/BooksAPI\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n    currentlyReading: [],\n    wantToRead: [],\n    booksRead: [],\n    optionValue: \"none\",\n    showSearchPage: false,\n    query: \"\"\n  };\n\n  componentDidMount() {\n    let currentlyReading = [];\n    let wantToRead = [];\n    let booksRead = [];\n    //get all the books when the page is loaded\n    BooksAPI.getAll().then(books => {\n      this.setState(() => ({\n        books\n      }));\n      //list the books according to the shelves in an array --\n      //currentlyReading,  wantToRead, booksRead\n      return this.state.books.map(book => {\n        //1.currently Reading shelf\n        if (book.shelf === \"currentlyReading\") {\n          currentlyReading.push(book);\n          this.setState(() => ({\n            currentlyReading: currentlyReading\n          }));\n        }\n        //2. want to read shelf\n        if (book.shelf === \"wantToRead\") {\n          wantToRead.push(book);\n          this.setState(() => ({\n            wantToRead: wantToRead\n          }));\n        }\n        //3. books read shelf\n        if (book.shelf === \"read\") {\n          booksRead.push(book);\n          this.setState(() => ({\n            booksRead: booksRead\n          }));\n        }\n\n        return this.state.books;\n      });\n    });\n  }\n  \n  //UI display for currently reading book shelf\n  renderCurrentlyReadingBooks = () => {\n    const { currentlyReading, optionValue } = this.state;\n\n    return currentlyReading.map((book, i) => {\n      if (optionValue === \"wantToRead\") {\n        BooksAPI.update(book, book.shelf);\n      }\n      return (\n        <EachBookDetails\n          key={\"book_\"+ i}\n          imagePath={book.imageLinks.thumbnail}\n          optionSelected={this.state.optionValue}\n          handleBookShelfUpdate={this.onBookUpdate(book)}\n          nameOfTheBook={book.title}\n          authorOfTheBook={book.authors}\n          bookId={book.id}\n          index={i}\n        />\n      );\n    });\n  };\n\n  //UI display for want to read book shelf\n  renderWantToReadBooks = () => {\n    const { wantToRead } = this.state;\n\n    return wantToRead.map((book, i) => {\n      return (\n        <EachBookDetails\n          key={\"books_\"+i+i}\n          imagePath={book.imageLinks.thumbnail}\n          optionSelected={this.state.optionValue}\n          handleBookShelfUpdate={this.onBookUpdate(book)}\n          nameOfTheBook={book.title}\n          authorOfTheBook={book.authors}\n          bookId={book.id}\n          index={i}\n        />\n      );\n    });\n  };\n\n  //UI display for read book shelf\n  renderBooksRead = () => {\n    const { booksRead } = this.state;\n\n    return booksRead.map((book, i) => {\n      return (\n        <EachBookDetails\n          key={\"books_0\"+i}\n          imagePath={book.imageLinks.thumbnail}\n          optionSelected={this.state.optionValue}\n          handleBookShelfUpdate={this.onBookUpdate(book)}\n          nameOfTheBook={book.title}\n          authorOfTheBook={book.authors}\n          bookId={book.id}\n          index={i}\n        />\n      );\n    });\n  };\n\n  //function called when a book is moved from one shelf to another\n  onBookUpdate = book => event => {\n    this.setState(\n      {\n        optionValue: event.target.value\n      },\n      () => {\n        if (\n          book.shelf === \"currentlyReading\" &&\n          this.state.optionValue === \"wantToRead\"\n        ) {\n          book.shelf = \"wantToRead\";\n          this.setState({\n            currentlyReading: this.state.currentlyReading.filter(\n              c => c.id !== book.id\n            ),\n            wantToRead: this.state.wantToRead.concat(book),\n            optionValue: \"none\"\n          });\n          BooksAPI.update(book, book.shelf);\n        }\n        if (\n          book.shelf === \"currentlyReading\" &&\n          this.state.optionValue === \"read\"\n        ) {\n          book.shelf = \"read\";\n          this.setState({\n            currentlyReading: this.state.currentlyReading.filter(\n              c => c.id !== book.id\n            ),\n            booksRead: this.state.booksRead.concat(book),\n            optionValue: \"none\"\n          });\n          BooksAPI.update(book, book.shelf);\n        }\n\n        if (\n          book.shelf === \"wantToRead\" &&\n          this.state.optionValue === \"currentlyReading\"\n        ) {\n          book.shelf = \"currentlyReading\";\n          this.setState({\n            wantToRead: this.state.wantToRead.filter(c => c.id !== book.id),\n            currentlyReading: this.state.currentlyReading.concat(book),\n            optionValue: \"none\"\n          });\n          BooksAPI.update(book, book.shelf);\n        }\n\n        if (book.shelf === \"wantToRead\" && this.state.optionValue === \"read\") {\n          book.shelf = \"read\";\n          this.setState({\n            wantToRead: this.state.wantToRead.filter(c => c.id !== book.id),\n            booksRead: this.state.booksRead.concat(book),\n            optionValue: \"none\"\n          });\n          BooksAPI.update(book, book.shelf);\n        }\n\n        if (book.shelf === \"read\" && this.state.optionValue === \"wantToRead\") {\n          book.shelf = \"wantToRead\";\n          this.setState({\n            booksRead: this.state.booksRead.filter(c => c.id !== book.id),\n            wantToRead: this.state.wantToRead.concat(book),\n            optionValue: \"none\"\n          });\n          BooksAPI.update(book, book.shelf);\n        }\n\n        if (\n          book.shelf === \"read\" &&\n          this.state.optionValue === \"currentlyReading\"\n        ) {\n          book.shelf = \"currentlyReading\";\n          this.setState({\n            booksRead: this.state.booksRead.filter(c => c.id !== book.id),\n            currentlyReading: this.state.currentlyReading.concat(book),\n            optionValue: \"none\"\n          });\n          BooksAPI.update(book, book.shelf);\n        }\n      }\n    );\n  };\n\n  //function is challed when the change is triggered on input field\n  updateQuery = query => {\n    this.setState(() => ({\n      query: query\n    }));\n    BooksAPI.search(query);\n  };\n  \n  //function called when the user clears the input field\n  clearQuery = () => {\n    this.updateQuery(\"\");\n  };\n\n  render() {\n    const { query, books } = this.state;\n    const showingBooks =\n      query === \"\"\n        ? []\n        : books.filter(c =>\n            c.title.toLowerCase().includes(query.toLowerCase())\n          );\n    return (\n      <div>\n        <Router>\n          <Route\n            key=\"search\"\n            exact\n            path=\"/search\"\n            render={({ history }) => (\n              <SearchPage\n                valueOfInputField={query}\n                handleQueryUpdate={event =>\n                  this.updateQuery(event.target.value)\n                }\n                getSearchResults={\n                  showingBooks === null || showingBooks === undefined\n                    ? null\n                    : showingBooks.map((book, i) => {\n                        return (\n                          <div key={Math.random().toString(16).slice(2)}>\n                            <h3>{book.shelf}</h3>\n                            <EachBookDetails\n                              key={\"book_\"+i+ \"_s\"}\n                              imagePath={book.imageLinks.thumbnail}\n                              optionSelected={this.state.optionValue}\n                              handleBookShelfUpdate={this.onBookUpdate(book)}\n                              nameOfTheBook={book.title}\n                              authorOfTheBook={book.authors}\n                              bookId={book.id}\n                              index={i}\n                            />\n                          </div>\n                        );\n                      })\n                }\n              />\n            )}\n          />\n\n          <Route\n            key=\"home\"\n            exact\n            path=\"/\"\n            render={() => (\n              <BookShelves\n                key={\"bookshelves_\"+ Math.random().toString(16).slice(2)}\n                currentlyReadingTitle=\"Currently Reading\"\n                displayCurrentlyReadingBooks={this.renderCurrentlyReadingBooks()}\n                wantToReadTitle=\"Want to Read\"\n                displayWantToReadBooks={this.renderWantToReadBooks()}\n                readTitle=\"Read\"\n                displayTheBooksRead={this.renderBooksRead()}\n              />\n            )}\n          />\n        </Router>\n      </div>\n    );\n  }\n}\nexport default BooksApp;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}